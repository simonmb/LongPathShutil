name: Test and publish

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches:
      - '**:**'
  release:
    types: [published]

jobs:
  test:

    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests
          pip install beautifulsoup4
          pip install pytest
          pip install .

      - name: Run tests
        shell: bash
        run: pytest

  build:
    name: Build distribution
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.x"
    - name: Install pypa/build
      run: >-
        python -m
        pip install
        build
        --user

    - name: Build wheel
      run: python -m build
    - name: Store the distribution packages
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

    - name: Install coveo-pypi-cli
      run: pip install coveo-pypi-cli

    - name: Determine the version for this release from the build
      id: current
      run: |
        BUILD_VER="$(ls dist/longpathshutil-*.tar.gz)"
        echo "Path: $BUILD_VER"
        if [[ $BUILD_VER =~ (longpathshutil-)([^,][0-9.]{2}) ]]; then
            echo "version=${BASH_REMATCH[2]}" >> $GITHUB_OUTPUT
            echo "Version of build: ${BASH_REMATCH[2]}"
        else
            echo "No version found found"
        fi

    - name: Get latest published version
      id: published
      run: |
        PUB_VER="$(pypi current-version longpathshutil)"
        echo "version=$PUB_VER" >> $GITHUB_OUTPUT
        echo "Latest published version: $PUB_VER"

    - name: Tag repository
      shell: bash
      id: get-next-tag
      if: (steps.current.outputs.version != steps.published.outputs.version)
      run: |
        TAG_NAME=${{ steps.current.outputs.version }}
        echo "tag-name=$TAG_NAME" >> $GITHUB_OUTPUT
        echo "This release will be tagged as $TAG_NAME"
        git config user.name "github-actions"
        git config user.email "actions@users.noreply.github.com"
        git tag --annotate --message="Automated tagging system" $TAG_NAME ${{ github.sha }}

    - name: Push the tag
      if: (steps.current.outputs.version != steps.published.outputs.version)
      id: push_tag
      env:
        TAG_NAME: ${{ steps.current.outputs.version }}
      run: |
        if [[ ${{ github.ref_name }} == 'main' ]]; then
          git push origin $TAG_NAME
          echo "should_release=true" >> $GITHUB_OUTPUT
        else
          echo "If this was the main branch, I would push a new tag named $TAG_NAME"
          echo "should_release=false" >> $GITHUB_OUTPUT
        fi
    - name: Wait for GitHub to register the tag
      run: sleep 10
      
    - name: Release
      uses: softprops/action-gh-release@v2
      if: ${{ steps.push_tag.outputs.should_release == 'true' }}
      with:
        tag_name: ${{ steps.current.outputs.version }}
        files: dist/molecule_resolver-${{ steps.current.outputs.version }}.tar.gz

    outputs:
      publish_pypi: ${{ steps.push_tag.outputs.should_release }}
      publish_test_pypi: ${{ (steps.current.outputs.version != steps.published.outputs.version) && github.ref_name != 'main' }}

  publish-to-pypi:
    name: Pubish to pypi
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/LongPathShutil
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
      - name: Download built package
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish to pypi if new version
        env:
          should_publish: ${{ needs.build.outputs.publish_pypi }}
        if: ${{ env.should_publish == 'true' }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/ 

      - name: Publish to test pypi if new version not on main
        env:
          should_publish: ${{ needs.build.outputs.publish_test_pypi }}
        if: ${{ env.should_publish == 'true' }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true